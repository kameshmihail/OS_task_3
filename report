Московский Авиационный Институт
(Национальный Исследовательский Университет)

Факультет информационных технологий и прикладной математики
Кафедра вычислительной математики и программирования


Лабораторная работа №3 по курсу
«Операционные системы»
	

Содержание
1.	Постановка задания
2.	Вариант задания
3.	Общие сведения о программе
4.	Общий метод и алгоритм решения
5.	Демонстрация работы программы
6. 	Выводы

Цель работы
Целью является приобретение практических навыков в:
•	Управление потоками в ОС
•	Обеспечение синхронизации между потоками
Задание
Составить программу на языке Си, обрабатывающую данные в многопоточном режиме. При обработки использовать стандартные средства создания потоков операционной системы (Windows/Unix). При создании необходимо предусмотреть ключи, которые позволяли бы задать максимальное количество потоков, используемое программой. При возможности необходимо использовать максимальное количество возможных потоков.
Ограничение потоков может быть задано или ключом запуска вашей программы, или алгоритмом.


Вариант задания.
Реализовать битоническую сортировку, реализовать для неё многопоточность.

Общие сведения о программе
Программа компилируется из одного файла main.c. В программе используются следующие системные вызовы:
1.	omp_set_dynamic - включает или отключает динамическую настройку количества потоков, доступных для выполнения последующих параллельных областей, путем установки значения ICV dyn-var.
2.	omp_get_num_procs - возвращает количество процессоров, доступных устройству.
3.	omp_set_num_threads - влияет на количество потоков, которые будут использоваться для последующих параллельных областей, которые не определяют предложение num_threads, путем установки значения первого элемента nthreads-var ICV текущей задачи.
4.	pthread_create - функция используется для создания нового потока с атрибутами, указанными attr, в процессе
5.	pthread_join - функция должна приостанавливать выполнение вызывающего потока до завершения целевого потока, если целевой поток уже не завершился.

Общий метод и алгоритм решения.
Для реализации поставленной задачи необходимо:
1.	Создать битоническую сортировку.
2.	Использовать omp для создания нескольких потоков.
3.	Создание дополнительных потоков с помощью pthread_create.
4.	При рекурсивных вызовах сортировки сделать так, чтобы каждая рекурсия параллельно использовалась в отдельном потоке.

Демонстрация работы программы.
Enter number of elements to be sorted : 
8
-1 5 6 2 7 2 3 1
-1 1 2 2 3 5 6 7

Выводы:
В процессе выполнения работы были изучены способы управления потоками в ОС, обеспечение синхронизации между потоками и принципы работы битонической сортировки.
Количество потоков было задано максимально возможное с помощью функций библиотеки omp. Возникали проблемы с функцией создания потоков, из-за того, что как аргумент
должна передаваться одна переменная, а переменных внутри сортировки было много. Поэтому эти переменные были перенесены в структуру, а передавалась ссылка на эту
структуру. Битоническая сортировка сама по себе не эффективна, однако мне распараллеливании её на много потоков она работает со скоростью, сравнимой с быстрой сортировкой.
